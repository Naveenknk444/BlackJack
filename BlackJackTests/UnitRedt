using Moq;
using Xunit;
using YourNamespace;  // Replace with actual namespace
using System.Threading.Tasks;

public class HallexDataMigratorSourceTests
{
    private readonly Mock<IService> _mockService;  // Mocking the service that HallexDataMigratorSource depends on
    private readonly HallexDataMigratorSource _hallexDataMigratorSource;

    public HallexDataMigratorSourceTests()
    {
        // Initialize the mock service
        _mockService = new Mock<IService>();
        
        // Initialize the class under test (HallexDataMigratorSource)
        _hallexDataMigratorSource = new HallexDataMigratorSource(_mockService.Object);
    }

    [Fact]
    public async Task Extract_ShouldReturnData_WhenValidIdIsPassed()
    {
        // Arrange: Mock the Extract method behavior
        var expectedData = new HallexRecordNew { Id = 1, Name = "TestRecord" };
        _mockService.Setup(service => service.Extract(It.IsAny<int>())).ReturnsAsync(expectedData);

        // Act: Call the Extract method
        var result = await _hallexDataMigratorSource.Extract(1);

        // Assert: Verify the result
        Assert.NotNull(result);
        Assert.Equal("TestRecord", result.Name);
    }

    [Fact]
    public async Task Extract_ShouldReturnNull_WhenInvalidIdIsPassed()
    {
        // Arrange: Mock the Extract method behavior to return null
        _mockService.Setup(service => service.Extract(It.IsAny<int>())).ReturnsAsync((HallexRecordNew)null);

        // Act: Call the Extract method with an invalid ID
        var result = await _hallexDataMigratorSource.Extract(999);

        // Assert: Verify that result is null
        Assert.Null(result);
    }

    [Fact]
    public async Task ExtractAll_ShouldReturnData_WhenDataIsAvailable()
    {
        // Arrange: Mock the ExtractAll method to return a list of records
        var expectedRecords = new List<HallexRecordNew>
        {
            new HallexRecordNew { Id = 1, Name = "Record 1" },
            new HallexRecordNew { Id = 2, Name = "Record 2" }
        };
        _mockService.Setup(service => service.ExtractAll()).ReturnsAsync(expectedRecords);

        // Act: Call the ExtractAll method
        var result = await _hallexDataMigratorSource.ExtractAll();

        // Assert: Verify that the list contains the expected records
        Assert.NotNull(result);
        Assert.Equal(2, result.Count);
        Assert.Equal("Record 1", result[0].Name);
    }

    [Fact]
    public async Task ExtractAll_ShouldReturnEmptyList_WhenNoDataIsAvailable()
    {
        // Arrange: Mock the ExtractAll method to return an empty list
        _mockService.Setup(service => service.ExtractAll()).ReturnsAsync(new List<HallexRecordNew>());

        // Act: Call the ExtractAll method
        var result = await _hallexDataMigratorSource.ExtractAll();

        // Assert: Verify that the list is empty
        Assert.Empty(result);
    }
}
